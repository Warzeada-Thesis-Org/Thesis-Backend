name: Backend CI

on: [push]

env:
  JAR_NAME: thesis-app

jobs:
  # Compiles the project, runs the tests and creates a runnable jar file
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Test and build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
      - name: Upload the built jar file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.JAR_NAME }}
          path: build/libs/thesis-*-SNAPSHOT.jar
          retention-days: 1

  # Dummy deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download the jar file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.JAR_NAME }}
      - name: Deploy
        run: ls -lh

  # Updates item status to "Test" when merge request is deployed and merged
  update-item-status:
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    needs: deploy
    env:
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      USER: warezeada
    steps:
      - name: Get project data
        env:
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Test") |.id' project_data.json) >> $GITHUB_ENV

      - name: Get number of the issue
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          itemNumber=$(echo "$COMMIT_MESSAGE" | grep -Eo '/#[0-9]+' | grep -Eo '[0-9]+')
          echo 'ISSUE_NUMBER='$itemNumber >> $GITHUB_ENV

      - name: Get ID of the item
        run: |
          itemId=$(gh api graphql -f query='
            query($user: String!, $number: Int!) {
              repository(owner: $user, name:"thesis-project-backend") {
                issue(number: $number) {
                  projectItems(first: 1) {
                    nodes {
                      id
                    }
                  }
                }
              }
            }' -f user=$USER -F number=$ISSUE_NUMBER --jq '.data.repository.issue.projectItems.nodes.[0].id')
          echo 'ITEM_ID='$itemId
          echo 'ITEM_ID='$itemId >> $GITHUB_ENV

      - name: Set status field to "Test"
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent




